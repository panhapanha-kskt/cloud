pipeline {
    agent any

    tools {
        jdk 'jdk'
        nodejs 'node16'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_REGISTRY = "localhost:5000"
        REGISTRY_CREDENTIALS_ID = "docker-registry"
        BUILD_TAG = "${env.BUILD_TAG}"
		emplfrontend_IMAGE_NAME = "empl-frontend"
		emplfrontend_CONTAINER_NAME = "empl-frontend"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Vinitha-Nayak/employee-management.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        dir('employeemanagement-frontend') {
							sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=emp_frontend \
							-Dsonar.projectKey=emp_frontend'''
                        }
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('employeemanagement-frontend') {
                    sh 'npm install'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('employeemanagement-frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage('Build and Push Image') {
            steps {
                dir('employeemanagement-frontend') { // Specify the working directory
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: "${REGISTRY_CREDENTIALS_ID}",
                            usernameVariable: 'REGISTRY_USER',
                            passwordVariable: 'REGISTRY_PASS'
                        )]) {
                            // Log in to Docker registry
                            sh 'docker login -u $REGISTRY_USER -p $REGISTRY_PASS $DOCKER_REGISTRY'
        
                            // Build the Docker image
                            sh 'docker build -t ${DOCKER_REGISTRY}/${emplfrontend_IMAGE_NAME}:${BUILD_TAG} .'
        
                            // Tag the Docker image (optional, depending on naming strategy)
                            //sh 'docker tag ${DOCKER_REGISTRY}/${emplbackend_IMAGE_NAME}:${BUILD_TAG}'
        
                            // Push the Docker image to the registry
                            sh 'docker push ${DOCKER_REGISTRY}/${emplfrontend_IMAGE_NAME}:${BUILD_TAG}'
                        }
                    }
                }
            }
        }
        stage('Run Image') {
            steps {
                script {
                    sh 'docker run -d -p 3000:3000 ${DOCKER_REGISTRY}/${emplfrontend_IMAGE_NAME}:${BUILD_TAG}'
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                script {
                    sh 'trivy image ${DOCKER_REGISTRY}/${emplfrontend_IMAGE_NAME}:${BUILD_TAG} > trivy.txt'
                }
            }
        }
    }
}
